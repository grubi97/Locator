{"version":3,"sources":["components/About.js","components/Temperatures.js","components/Pressure.js","components/Graphs.js","components/Add.js","components/Map.js","components/Details.js","App.js","reportWebVitals.js","index.js"],"names":["About","Container","className","Temperatures","props","data","datasets","readings","height","width","options","responsive","maintainAspectRatio","elements","point","radius","hitRadius","tooltips","enabled","title","display","text","fontSize","scales","xAxes","scaleLabel","labelString","type","ticks","min","start","max","end","maxTicksLimit","time","displayFormats","hour","yAxes","Pressure","Graphs","useState","Date","now","startDate","setStartDate","endDate","setEndDate","loaded","formatedTemperatures","setLoaded","useEffect","axios","get","then","response","dataSample","formatedPressure","forEach","sensor","readingsTemperatures","readingsPressure","map","reading","push","x","date","y","temperature","pressure","value1","Math","random","value2","value3","label","name","backgroundColor","catch","error","console","log","htmlFor","id","value","onChange","event","target","style","overflowX","Add","setName","password","setPassword","location","setLocation","latitude","setLatitude","longitude","setLongitude","historyHook","useHistory","handleChange","Form","onSubmit","preventDefault","post","Label","Control","placeholder","Button","variant","Map","replacementMarker","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","Marker","prototype","sensorArray","sensors","setSensors","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","position","Popup","Table","hover","Navigation","Navbar","bg","Brand","Nav","Link","as","to","App","path","Details","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.831af76d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Container} from 'react-bootstrap'\r\nfunction About()\r\n{\r\n\r\n    return(\r\n\r\n        <Container className=\"mt-4\">\r\n            <h2>About the project</h2>\r\n            <p> Project created by Luka Šimić, Predrag Duvnjak and Marko Grubeša.</p>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default About;","import {Line} from 'react-chartjs-2'\r\nfunction Temperatures(props)\r\n{\r\n  return(\r\n    <Line\r\n      data={{\r\n        datasets:props.readings\r\n      }}\r\n      height={400}\r\n      width={1200}\r\n      options={{\r\n        responsive:false,\r\n        maintainAspectRatio:false,\r\n        elements:{\r\n          point:{\r\n            radius:0,\r\n            hitRadius:0\r\n          }\r\n        },\r\n        tooltips:{\r\n          enabled:false\r\n        },\r\n        title:{\r\n          display:true,\r\n          text:\"Temperatures graph\",\r\n          fontSize:\"18\"\r\n        },\r\n        scales:{\r\n          xAxes:[\r\n            {\r\n              scaleLabel:{\r\n                display:true,\r\n                labelString:\"Time\"\r\n              },\r\n              type:'time',\r\n              ticks:{\r\n                min:props.start,\r\n                max:props.end,\r\n                maxTicksLimit:10,\r\n              },\r\n              time:{\r\n                displayFormats:{\r\n                  hour:'D.M.YYYY h:mm a'\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          yAxes:[\r\n            {\r\n              scaleLabel:{\r\n                display:true,\r\n                labelString:\"Temperature\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Temperatures;","import {Line} from 'react-chartjs-2'\r\nfunction Pressure(props)\r\n{\r\n  return(\r\n    <Line\r\n      data={{\r\n        datasets:props.readings\r\n      }}\r\n      height={400}\r\n      width={1200}\r\n      options={{\r\n        responsive:false,\r\n        maintainAspectRatio:false,\r\n        elements:{\r\n          point:{\r\n            radius:0,\r\n            hitRadius:0\r\n          }\r\n        },\r\n        tooltips:{\r\n          enabled:false\r\n        },\r\n        title:{\r\n          display:true,\r\n          text:\"Pressure graph\",\r\n          fontSize:\"18\"\r\n        },\r\n        scales:{\r\n          xAxes:[\r\n            {\r\n              scaleLabel:{\r\n                display:true,\r\n                labelString:\"Time\"\r\n              },\r\n              type:'time',\r\n              ticks:{\r\n                min:props.start,\r\n                max:props.end,\r\n                maxTicksLimit:10,\r\n              },\r\n              time:{\r\n                displayFormats:{\r\n                  hour:'D.M.YYYY h:mm a'\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          yAxes:[\r\n            {\r\n              scaleLabel:{\r\n                display:true,\r\n                labelString:\"Pressure\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Pressure;","import {React,useState,useEffect} from 'react'\r\nimport Temperatures from './Temperatures'\r\nimport Pressure from './Pressure'\r\nimport axios from 'axios'\r\nfunction Graphs()\r\n{\r\n    const [startDate,setStartDate] = useState(Date.now()-24*60*60*1000)\r\n    const [endDate,setEndDate] = useState(Date.now())\r\n    const [loaded,setLoaded]=useState({loaded:false,formatedTemperatures:[]})\r\n\r\n    useEffect(()=>{\r\n        if(!loaded.loaded)\r\n        {\r\n            axios.get(\"/api/sensor\")\r\n                .then(response=>{\r\n                    let dataSample=response.data\r\n                    let formatedTemperatures=[]\r\n                    let formatedPressure=[]\r\n                    dataSample.forEach((sensor)=>{\r\n                        let readingsTemperatures=[]\r\n                        let readingsPressure=[]\r\n                        sensor.readings.map((reading)=>{\r\n                            readingsTemperatures.push({\r\n                                x:reading.date,\r\n                                y:reading.temperature,\r\n                            })\r\n                            readingsPressure.push({\r\n                                x:reading.date,\r\n                                y:reading.pressure,\r\n                            })\r\n                        })\r\n                        let value1=Math.random()*256\r\n                        let value2=Math.random()*256\r\n                        let value3=Math.random()*256\r\n                        formatedTemperatures.push(\r\n                            {\r\n                                label:sensor.name,\r\n                                data:readingsTemperatures,\r\n                                backgroundColor:`rgba(${value1},${value2},${value3},0.4)`\r\n                            }\r\n                        )\r\n                        formatedPressure.push(\r\n                            {\r\n                                label:sensor.name,\r\n                                data:readingsPressure,\r\n                                backgroundColor:`rgba(${value1},${value2},${value3},0.4)`\r\n                            }\r\n                        )\r\n                    })\r\n                    setLoaded({loaded:true,formatedTemperatures:formatedTemperatures,formatedPressure:formatedPressure})\r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error)\r\n                })\r\n\r\n        }\r\n    })\r\n\r\n    const handleStartDate=event=>{\r\n        setStartDate(event.target.value)\r\n    }\r\n    const handleEndDate=event=>{\r\n        setEndDate(event.target.value)\r\n    }\r\n    if(loaded)\r\n        return(\r\n\r\n            <div className=\"mt-4 ml-4\">\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"startDate\">Start date</label>\r\n                    <input id=\"startDate\" type=\"datetime-local\" value={startDate} onChange={handleStartDate}></input>\r\n                    <label htmlFor=\"startDate\" className=\"ml-3\">End date</label>\r\n                    <input id=\"startDate\" type=\"datetime-local\"   onChange={handleEndDate}></input>\r\n                </div>\r\n                <div style={{overflowX:\"scroll\"}}>\r\n                <Temperatures readings={loaded.formatedTemperatures} start={startDate} end={endDate}/>\r\n                <Pressure readings={loaded.formatedPressure} start={startDate} end={endDate}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    return (<div></div>)\r\n}\r\n\r\nexport default Graphs;","import {React,useState} from 'react'\r\nimport {Container,Form,Button} from 'react-bootstrap'\r\nimport {useHistory} from \"react-router-dom\"\r\nimport axios from 'axios'\r\nfunction Add()\r\n{\r\n    const [name,setName] = useState(\"\")\r\n    const [password,setPassword] = useState(\"\")\r\n    const [location,setLocation] = useState(\"\")\r\n    const [latitude,setLatitude] = useState(\"\")\r\n    const [longitude,setLongitude] = useState(\"\")\r\n    let historyHook=useHistory();\r\n    const submit=event=>\r\n    {\r\n        event.preventDefault()\r\n        axios.post(\"/api/sensor\",{\r\n            \"latitude\":latitude,\r\n            \"longitude\":longitude,\r\n            \"password\":password,\r\n            \"name\":name,\r\n            \"location\":location\r\n        })\r\n        historyHook.push(\"/\")\r\n    }\r\n    const handleChange=event=>\r\n    {\r\n        if(event.target.name===\"name\")setName(event.target.value)\r\n        if(event.target.name===\"password\")setPassword(event.target.value)\r\n        if(event.target.name===\"location\")setLocation(event.target.value)\r\n        if(event.target.name===\"latitude\")setLatitude(event.target.value)\r\n        if(event.target.name===\"longitude\")setLongitude(event.target.value)\r\n    }\r\n    return(\r\n\r\n        <Container className=\"mt-4\">\r\n            <h2>Add a new sensor</h2>\r\n            <Form className=\"mt-4\" onSubmit={submit}>\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control name =\"name\" type=\"text\" onChange={handleChange} value ={name} placeholder=\"Sensors name\" />\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control name =\"password\" type=\"text\" onChange={handleChange} value ={password} placeholder=\"Password used to send sensor data\" />\r\n                <Form.Label>Location</Form.Label>\r\n                <Form.Control name =\"location\" type=\"text\" onChange={handleChange} value ={location} placeholder=\"Sensors location\" />\r\n                <Form.Label>Latitude</Form.Label>\r\n                <Form.Control name =\"latitude\" type=\"number\" onChange={handleChange} value ={latitude} placeholder=\"Location latitude\" />\r\n                <Form.Label>Longitude</Form.Label>\r\n                <Form.Control name =\"longitude\" type=\"number\" onChange={handleChange} value ={longitude} placeholder=\"Location Longitude\" />\r\n                <Button className=\"mt-3\" variant=\"primary\" type=\"submit\">Create</Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default Add;","import React, { useEffect,useState } from 'react'\r\nimport {Container} from 'react-bootstrap'\r\nimport {MapContainer,TileLayer,Marker,Popup} from 'react-leaflet'\r\nimport axios from 'axios'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport 'leaflet/dist/leaflet.js'\r\nimport icon from 'leaflet/dist/images/marker-icon.png'\r\nimport L from 'leaflet';\r\nfunction Map()\r\n{\r\n    let replacementMarker = L.icon({\r\n        iconUrl: icon,\r\n        iconSize: [25,41],\r\n        iconAnchor: [12,41],\r\n        popupAnchor: [0, -26]\r\n    });\r\n    \r\n    L.Marker.prototype.options.icon = replacementMarker;\r\n    const [sensors,setSensors] = useState({\r\n        sensorArray:[],\r\n        loaded:false\r\n    })\r\n    useEffect((()=>{\r\n        if(!sensors.loaded)\r\n        axios.get(\"/api/sensor\")\r\n            .then(response=>{\r\n                setSensors({sensorArray:response.data,loaded:true})\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error)\r\n            })\r\n    }))\r\n\r\n    if(sensors.loaded)\r\n    return(\r\n        <Container className=\"mt-4\">\r\n        <h2>Map displaying sensors</h2>\r\n        <p>This map shows all the sensors currently sending data to the database.</p>\r\n        <div>\r\n            <MapContainer style={{height:\"50vh\",width:\"50vw\" }} center={[45.509,16.776]} zoom={6} scrollWheelZoom={true}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {sensors.sensorArray.map((sensor)=>{ return(\r\n                <Marker position={[sensor.latitude, sensor.longitude]}>\r\n                    <Popup>\r\n                        {sensor.name}\r\n                    </Popup>\r\n                </Marker>)\r\n                })}\r\n            </MapContainer>\r\n        </div>\r\n        </Container>\r\n    )\r\n    return (<div></div>)\r\n\r\n}\r\n\r\nexport default Map;","import {React,useEffect,useState} from 'react'\r\nimport {Container,Table} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nfunction About()\r\n{\r\n    const [sensors,setSensors] = useState({\r\n      sensorArray:[],\r\n      loaded:false\r\n      })\r\n    useEffect((()=>{\r\n      if(!sensors.loaded)\r\n        axios.get(\"/api/sensor\")\r\n            .then(response=>{\r\n                setSensors({sensorArray:response.data,loaded:true})\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error)\r\n            })\r\n    }))\r\n\r\n    return(\r\n      <Container className=\"mt-4\">\r\n        <Table hover >\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Location</th>\r\n              <th>Latitude</th>\r\n              <th>Longitude</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sensors.sensorArray.map(sensor=>{return(\r\n              <tr>\r\n                <td>{sensor.name}</td>\r\n                <td>{sensor.location}</td>\r\n                <td>{sensor.latitude}</td>\r\n                <td>{sensor.longitude}</td>\r\n              </tr>\r\n            )})}\r\n          </tbody>\r\n        </Table>\r\n      </Container>\r\n    )\r\n\r\n}\r\nexport default About;","import './App.css';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\"\r\nimport About from './components/About'\r\nimport Graphs from './components/Graphs'\r\nimport Add from './components/Add'\r\nimport Map from './components/Map'\r\nimport Details from './components/Details'\r\nimport {Navbar,Nav} from 'react-bootstrap'\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Navigation/>\r\n        <Switch>\r\n          <Route path=\"/about\"><About/></Route>\r\n          <Route path=\"/details\"><Details/></Route>\r\n          <Route path=\"/add\"><Add/></Route>\r\n          <Route path=\"/map\"><Map/></Route>\r\n          <Route path=\"/\"><Graphs/></Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Navigation()\r\n{\r\n\r\n    return(\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand>Measurements are fun</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link as ={Link} to=\"/\">Home</Nav.Link>\r\n          <Nav.Link as ={Link} to=\"/map\">Map</Nav.Link>\r\n          <Nav.Link as ={Link} to=\"/details\">Details</Nav.Link>\r\n          <Nav.Link as ={Link} to=\"/add\">Add sensors</Nav.Link>\r\n          <Nav.Link as ={Link} to=\"/about\">About</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}